name: X86_64 OpenWrt  # 🏷 工作流名称：X86_64 OpenWrt 固件编译

on:
  workflow_dispatch:  # 🚀 允许手动触发工作流
  schedule:
    - cron: 0 19 * * *  # ⏳ 每天 UTC 时间 19:00 触发定时编译（北京时间 03:00）

env:
  REPO_URL: https://github.com/Lienol/openwrt.git  # 🔗 OpenWrt 源码仓库地址
  REPO_BRANCH: main  # 📌 OpenWrt 源码使用的分支
  CONFIG_FILE: configs/x86_64.config  # ⚙️ OpenWrt 编译配置文件路径
  DIY_SCRIPT: diy-script.sh  # 🛠 OpenWrt 预编译自定义脚本
  CLASH_KERNEL: amd64  # 🌐 Clash 核心架构
  CACHE_TOOLCHAIN: true  # 💾 是否缓存编译工具链（提升编译速度）
  UPLOAD_BIN_DIR: false  # 🚀 是否上传 bin 目录（固件二进制文件）
  FIRMWARE_RELEASE: true  # 📦 是否发布固件（Release）
  FIRMWARE_TAG: X86_64  # 🔖 固件版本标签
  TZ: Asia/Shanghai  # 🌍 设置时区为上海

jobs:
  Build:  # 📌 编译任务
    runs-on: ubuntu-22.04  # 🏗 运行环境 Ubuntu 22.04

    steps:
    - name: Check Server Performance  # ⚡️ 检查服务器性能
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPU核心数量: $(nproc)"
        echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Initialization Environment  # 🔧 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q)
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
        sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        sudo -E apt-get -y update
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
        sudo -E systemctl daemon-reload
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        sudo timedatectl set-timezone "$TZ"

    - name: Combine Disks  # 💾 合并磁盘空间（提升存储空间）
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 100
        root-reserve-mb: 1024

    - name: Checkout  # 📥 拉取 GitHub 仓库代码
      uses: actions/checkout@main

    - name: Clone Source Code  # 🔄 克隆 OpenWrt 源码
      run: |
        df -hT $GITHUB_WORKSPACE
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
        COMMIT_AUTHOR=$(git show -s --date=short --format="作者: %an")
        echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_ENV
        COMMIT_DATE=$(git show -s --date=short --format="时间: %ci")
        echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_ENV
        COMMIT_MESSAGE=$(git show -s --date=short --format="内容: %s")
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
        COMMIT_HASH=$(git show -s --date=short --format="hash: %H")
        echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV

    - name: Generate Variables  # 🔍 解析编译变量
      run: |
        cp $CONFIG_FILE $OPENWRT_PATH/.config
        cd $OPENWRT_PATH
        make defconfig > /dev/null 2>&1
        DEVICE_TARGET=$(grep CONFIG_TARGET_BOARD .config | awk -F '"' '{print $2}')
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
        DEVICE_SUBTARGET=$(grep CONFIG_TARGET_SUBTARGET .config | awk -F '"' '{print $2}')
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV

    - name: Cache Toolchain  # 💾 缓存编译工具链
      if: env.CACHE_TOOLCHAIN == 'true'
      uses: HiGarfield/cachewrtbuild@main
      with:
        mixkey: ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
        prefix: ${{ env.OPENWRT_PATH }}

    - name: Install Feeds  # 📦 安装 OpenWrt 依赖软件包
      run: |
        cd $OPENWRT_PATH
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Load Custom Configuration  # 🛠 加载自定义配置
      run: |
        [ -e files ] && mv files $OPENWRT_PATH/files
        chmod +x $GITHUB_WORKSPACE/scripts/*.sh
        chmod +x $DIY_SCRIPT
        cd $OPENWRT_PATH
        $GITHUB_WORKSPACE/$DIY_SCRIPT

    - name: Download DL Package  # 📥 下载 OpenWrt 依赖包
      run: |
        cd $OPENWRT_PATH
        make defconfig
        make download -j8
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile Firmware  # 🔧 编译 OpenWrt 固件
      run: |
        cd $OPENWRT_PATH
        make -j$(nproc) || make -j1 || make -j1 V=s

    - name: Check Space Usage  # 📊 检查磁盘使用情况
      run: df -hT

    - name: Upload Bin Directory  # 🚀 上传 bin 目录
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      uses: actions/upload-artifact@main
      with:
        name: OpenWrt-bin
        path: ${{ env.OPENWRT_PATH }}/bin

    - name: Organize Files  # 🗂 整理编译输出文件
      run: |
        cd $OPENWRT_PATH/bin/targets/*/*
        cp $OPENWRT_PATH/.config build.config

    - name: Upload Firmware To Artifact  # 🚀 上传固件到 GitHub Actions
      uses: actions/upload-artifact@main
      with:
        name: OpenWrt-Firmware
        path: ${{ env.FIRMWARE_PATH }}

    - name: Upload Firmware To Release  # 📦 发布固件到 GitHub Release
      uses: ncipollo/release-action@v1
      with:
        name: R${{ env.DATE }} for ${{ env.FIRMWARE_TAG }}
        tag: ${{ env.FIRMWARE_TAG }}
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.FIRMWARE_PATH }}/*
        body: |
          **This is OpenWrt Firmware for ${{ env.FIRMWARE_TAG }}**
          ### 📒 固件信息
          - 💻 平台架构: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
          - ⚽ 固件源码: ${{ env.REPO_URL }}
          - 💝 源码分支: ${{ env.REPO_BRANCH }}
          - 🚀 内核版本: ${{ env.KERNEL }}
          - 🌐 默认地址: 192.168.88.1
          - 🔑 默认密码: password
          ### 🧊 固件版本
          - 固件编译前最后一次➦[主源码](${{ env.REPO_URL }})更新记录
          - ${{ env.COMMIT_AUTHOR }}
          - ${{ env.COMMIT_DATE }}
          - ${{ env.COMMIT_MESSAGE }}
          - ${{ env.COMMIT_HASH }}
